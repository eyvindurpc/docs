openapi: 3.0.0
info:
  title: Evolution API | v2.2.0 - v2.2.1
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
components:
  securitySchemes:
    apikeyAuth:
      type: http
      scheme: apikey
security:
  - apikeyAuth: []
tags:
  - name: Instance
  - name: Proxy
  - name: Settings
  - name: Send Message
  - name: Call
  - name: Chat
  - name: Label
  - name: Profile Settings
  - name: Group
  - name: Integrations
  - name: Integrations > Events
  - name: Integrations > Events > Websocket
  - name: Integrations > Events > Rabbitmq
  - name: Integrations > Events > Sqs
  - name: Integrations > Events > Webhook
  - name: Integrations > Chatbot
  - name: Integrations > Chatbot > Chatwoot
  - name: Integrations > Chatbot > Typebot
  - name: Integrations > Chatbot > Typebot > Typebot Session
  - name: Integrations > Chatbot > Typebot > Default Settings
  - name: Integrations > Chatbot > Evolution Bot
  - name: Integrations > Chatbot > Evolution Bot > Session
  - name: Integrations > Chatbot > Evolution Bot > Default Settings
  - name: Integrations > Chatbot > Openai
  - name: Integrations > Chatbot > Openai > Openai Session
  - name: Integrations > Chatbot > Openai > Default Settings
  - name: Integrations > Chatbot > Openai > Openai Creds
  - name: Integrations > Chatbot > Dify
  - name: Integrations > Chatbot > Dify > Dify Session
  - name: Integrations > Chatbot > Dify > Default Settings
  - name: Integrations > Chatbot > Flowise
  - name: Integrations > Chatbot > Flowise > Flowise Session
  - name: Integrations > Chatbot > Flowise > Default Settings
  - name: Integrations > Channel
  - name: Integrations > Channel > Cloud API Oficial
  - name: Integrations > Channel > Cloud API Oficial > Send Message
  - name: Integrations > Channel > Cloud API Oficial > Template
  - name: Integrations > Storage
  - name: Integrations > Storage > S3
paths:
  /instance/create:
    post:
      tags:
        - Instance
      summary: Create Instance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    // instance\r\n    \"instanceName\": \"{{instance}}\",\r\n    // \"token\": \"{{apikey}}\", // (Optional)\r\n    // \"number\": \"{{number}}\", // (Optional)\r\n    \"qrcode\": true, // (Optional)\r\n    \"integration\": \"WHATSAPP-BAILEYS\" // WHATSAPP-BAILEYS | WHATSAPP-BUSINESS | EVOLUTION (Default WHATSAPP-BAILEYS) \r\n    // settings (Optional)\r\n    // \"rejectCall\": false,\r\n    // \"msgCall\": \"\",\r\n    // \"groupsIgnore\": false,\r\n    // \"alwaysOnline\": false,\r\n    // \"readMessages\": false,\r\n    // \"readStatus\": false,\r\n    // \"syncFullHistory\": false,\r\n    // // proxy (Optional)\r\n    // \"proxyHost\": \"\",\r\n    // \"proxyPort\": \"\",\r\n    // \"proxyProtocol\": \"\",\r\n    // \"proxyUsername\": \"\",\r\n    // \"proxyPassword\": \"\",\r\n    // webhook (Optional)\r\n    // \"webhook\": {\r\n    //     \"url\": \"\",\r\n    //     \"byEvents\": false,\r\n    //     \"base64\": true,\r\n    //     \"headers\": {\r\n    //         \"autorization\": \"Bearer TOKEN\",\r\n    //         \"Content-Type\": \"application/json\"\r\n    //     },\r\n    //     \"events\": [\r\n    //         \"APPLICATION_STARTUP\",\r\n    //         \"QRCODE_UPDATED\",\r\n    //         \"MESSAGES_SET\",\r\n    //         \"MESSAGES_UPSERT\",\r\n    //         \"MESSAGES_UPDATE\",\r\n    //         \"MESSAGES_DELETE\",\r\n    //         \"SEND_MESSAGE\",\r\n    //         \"CONTACTS_SET\",\r\n    //         \"CONTACTS_UPSERT\",\r\n    //         \"CONTACTS_UPDATE\",\r\n    //         \"PRESENCE_UPDATE\",\r\n    //         \"CHATS_SET\",\r\n    //         \"CHATS_UPSERT\",\r\n    //         \"CHATS_UPDATE\",\r\n    //         \"CHATS_DELETE\",\r\n    //         \"GROUPS_UPSERT\",\r\n    //         \"GROUP_UPDATE\",\r\n    //         \"GROUP_PARTICIPANTS_UPDATE\",\r\n    //         \"CONNECTION_UPDATE\",\r\n    //         \"LABELS_EDIT\",\r\n    //         \"LABELS_ASSOCIATION\",\r\n    //         \"CALL\",\r\n    //         \"TYPEBOT_START\",\r\n    //         \"TYPEBOT_CHANGE_STATUS\"\r\n    //     ]\r\n    // },\r\n    // // rabbitmq (Optional)\r\n    // \"rabbitmq\": {\r\n    //     \"enabled\": true,\r\n    //     \"events\": [\r\n    //         \"APPLICATION_STARTUP\",\r\n    //         \"QRCODE_UPDATED\",\r\n    //         \"MESSAGES_SET\",\r\n    //         \"MESSAGES_UPSERT\",\r\n    //         \"MESSAGES_UPDATE\",\r\n    //         \"MESSAGES_DELETE\",\r\n    //         \"SEND_MESSAGE\",\r\n    //         \"CONTACTS_SET\",\r\n    //         \"CONTACTS_UPSERT\",\r\n    //         \"CONTACTS_UPDATE\",\r\n    //         \"PRESENCE_UPDATE\",\r\n    //         \"CHATS_SET\",\r\n    //         \"CHATS_UPSERT\",\r\n    //         \"CHATS_UPDATE\",\r\n    //         \"CHATS_DELETE\",\r\n    //         \"GROUPS_UPSERT\",\r\n    //         \"GROUP_UPDATE\",\r\n    //         \"GROUP_PARTICIPANTS_UPDATE\",\r\n    //         \"CONNECTION_UPDATE\",\r\n    //         \"LABELS_EDIT\",\r\n    //         \"LABELS_ASSOCIATION\",\r\n    //         \"CALL\",\r\n    //         \"TYPEBOT_START\",\r\n    //         \"TYPEBOT_CHANGE_STATUS\"\r\n    //     ]\r\n    // },\r\n    // // sqs (Optional)\r\n    // \"sqs\": {\r\n    //     \"enabled\": true,\r\n    //     \"events\": [\r\n    //         \"APPLICATION_STARTUP\",\r\n    //         \"QRCODE_UPDATED\",\r\n    //         \"MESSAGES_SET\",\r\n    //         \"MESSAGES_UPSERT\",\r\n    //         \"MESSAGES_UPDATE\",\r\n    //         \"MESSAGES_DELETE\",\r\n    //         \"SEND_MESSAGE\",\r\n    //         \"CONTACTS_SET\",\r\n    //         \"CONTACTS_UPSERT\",\r\n    //         \"CONTACTS_UPDATE\",\r\n    //         \"PRESENCE_UPDATE\",\r\n    //         \"CHATS_SET\",\r\n    //         \"CHATS_UPSERT\",\r\n    //         \"CHATS_UPDATE\",\r\n    //         \"CHATS_DELETE\",\r\n    //         \"GROUPS_UPSERT\",\r\n    //         \"GROUP_UPDATE\",\r\n    //         \"GROUP_PARTICIPANTS_UPDATE\",\r\n    //         \"CONNECTION_UPDATE\",\r\n    //         \"LABELS_EDIT\",\r\n    //         \"LABELS_ASSOCIATION\",\r\n    //         \"CALL\",\r\n    //         \"TYPEBOT_START\",\r\n    //         \"TYPEBOT_CHANGE_STATUS\"\r\n    //     ]\r\n    // },\r\n    // // chatwoot (Optional)\r\n    // \"chatwootAccountId\": \"1\",\r\n    // \"chatwootToken\": \"TOKEN\",\r\n    // \"chatwootUrl\": \"https://chatoot.com\",\r\n    // \"chatwootSignMsg\": true,\r\n    // \"chatwootReopenConversation\": true,\r\n    // \"chatwootConversationPending\": false,\r\n    // \"chatwootImportContacts\": true,\r\n    // \"chatwootNameInbox\": \"evolution\",\r\n    // \"chatwootMergeBrazilContacts\": true,\r\n    // \"chatwootImportMessages\": true,\r\n    // \"chatwootDaysLimitImportMessages\": 3,\r\n    // \"chatwootOrganization\": \"Evolution Bot\",\r\n    // \"chatwootLogo\": \"https://evolution-api.com/files/evolution-api-favicon.png\",\r\n}"
      security:
        - apikeyAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /instance/fetchInstances:
    get:
      tags:
        - Instance
      summary: Fetch Instances
      security:
        - apikeyAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /instance/connect/{instance}:
    get:
      tags:
        - Instance
      summary: Instance Connect
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /instance/restart/{instance}:
    post:
      tags:
        - Instance
      summary: Restart Instance
      requestBody:
        content: {}
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /instance/setPresence/{instance}:
    post:
      tags:
        - Instance
      summary: Set Presence
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "presence": "available" /* available, unavailable */
                }
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /instance/connectionState/{instance}:
    get:
      tags:
        - Instance
      summary: Connection Status
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /instance/logout/{instance}:
    delete:
      tags:
        - Instance
      summary: Logout Instance
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /instance/delete/{instance}:
    delete:
      tags:
        - Instance
      summary: Delete Instance
      security:
        - apikeyAuth: []
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /proxy/set/{instance}:
    post:
      tags:
        - Proxy
      summary: Set Proxy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                enabled: true
                host: 0.0.0.0
                port: '8000'
                protocol: http
                username: user
                password: pass
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /proxy/find/{instance}:
    get:
      tags:
        - Proxy
      summary: Find Proxy
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /settings/set/{instance}:
    post:
      tags:
        - Settings
      summary: Set Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rejectCall: true
                msgCall: I do not accept calls
                groupsIgnore: false
                alwaysOnline: true
                readMessages: false
                syncFullHistory: false
                readStatus: false
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /settings/find/{instance}:
    get:
      tags:
        - Settings
      summary: Find Settings
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendText/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Text
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"text\": \"teste de envio\"\r\n    // options\r\n    // \"delay\": 1200,\r\n    // \"quoted\": {\r\n    //     // payload message or key.id only for get message in database\r\n    //     \"key\": {\r\n    //         \"id\": \" MESSAGE_ID\"\r\n    //     },\r\n    //     \"message\": {\r\n    //         \"conversation\": \"CONTENT_MESSAGE\"\r\n    //     }\r\n    // },\r\n    // \"linkPreview\": false,\r\n    // \"mentionsEveryOne\": false,\r\n    // \"mentioned\": [\r\n    //     \"{{remoteJid}}\"\r\n    // ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendMedia/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Media File
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendPtv/{instance}:
    post:
      tags:
        - Send Message
      summary: Send PTV File
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                number:
                  type: string
                  example: '{{remoteJid}}'
                file:
                  type: string
                  format: binary
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendWhatsAppAudio/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Narrated Audio
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"audio\": \"https://evolution-api.com/files/narratedaudio.mp3\" /* url or base64 */\r\n    // options\r\n    // \"delay\": 1200,\r\n    // \"quoted\": {\r\n    //     // payload message or key.id only for get message in database\r\n    //     \"key\": {\r\n    //         \"id\": \" MESSAGE_ID\"\r\n    //     },\r\n    //     \"message\": {\r\n    //         \"conversation\": \"CONTENT_MESSAGE\"\r\n    //     }\r\n    // },\r\n    // \"mentionsEveryOne\": false,\r\n    // \"mentioned\": [\r\n    //     \"{{remoteJid}}\"\r\n    // ],\r\n    // \"encoding\": true\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendStatus/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Status/Stories
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"type\": \"text\", /* text, image, video, audio */\r\n    \"content\": \"Hi, how are you today?\", /* text or url */\r\n    \"caption\": \"This is my status/storie image\", /* Optional for image or video */\r\n    \"backgroundColor\": \"#008000\",\r\n    \"font\": 1, /* Optional for text only. Accept the options below:\r\n                      1 = SERIF\r\n                      2 = NORICAN_REGULAR\r\n                      3 = BRYNDAN_WRITE\r\n                      4 = BEBASNEUE_REGULAR\r\n                      5 = OSWALD_HEAVY */\r\n    \"allContacts\": false, /* true to send to all contacts or false to send to statusJidList below */\r\n    \"statusJidList\": [\r\n        \"{{remoteJid}}@s.whatsapp.net\"\r\n    ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendSticker/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Sticker
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"sticker\": \"https://evolution-api.com/files/sticker.png\" /* url or base64 */\r\n    // options\r\n    // \"delay\": 1200,\r\n    // \"quoted\": {\r\n    //     // payload message or key.id only for get message in database\r\n    //     \"key\": {\r\n    //         \"id\": \" MESSAGE_ID\"\r\n    //     },\r\n    //     \"message\": {\r\n    //         \"conversation\": \"CONTENT_MESSAGE\"\r\n    //     }\r\n    // },\r\n    // \"mentionsEveryOne\": false,\r\n    // \"mentioned\": [\r\n    //     \"{{remoteJid}}\"\r\n    // ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendLocation/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"name\": \"Bora Bora\",\r\n    \"address\": \"French Polynesian\",\r\n    \"latitude\": -16.505538233564373,\r\n    \"longitude\": -151.7422770494996\r\n    // options\r\n    // \"delay\": 1200,\r\n    // \"quoted\": {\r\n    //     // payload message or key.id only for get message in database\r\n    //     \"key\": {\r\n    //         \"id\": \" MESSAGE_ID\"\r\n    //     },\r\n    //     \"message\": {\r\n    //         \"conversation\": \"CONTENT_MESSAGE\"\r\n    //     }\r\n    // },\r\n    // \"mentionsEveryOne\": false,\r\n    // \"mentioned\": [\r\n    //     \"{{remoteJid}}\"\r\n    // ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendContact/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Contact
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"contact\": [\r\n        {\r\n            \"fullName\": \"Contact Name\",\r\n            \"wuid\": \"559999999999\",\r\n            \"phoneNumber\": \"+55 99 9 9999-9999\",\r\n            \"organization\": \"Company Name\", /* Optional */\r\n            \"email\": \"email\", /* Optional */\r\n            \"url\": \"url page\" /* Optional */\r\n        },\r\n        {\r\n            \"fullName\": \"Contact Name\",\r\n            \"wuid\": \"559911111111\",\r\n            \"phoneNumber\": \"+55 99 9 1111-1111\",\r\n            \"organization\": \"Company Name\", /* Optional */\r\n            \"email\": \"email\", /* Optional */\r\n            \"url\": \"url page\" /* Optional */\r\n        }\r\n    ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendReaction/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Reaction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    // key of the message or key.id only for get message in database\r\n    \"key\": {\r\n        \"remoteJid\": \"{{remoteJid}}@s.whatsapp.net\", // or {{groupJid}}@g.us\"\r\n        \"fromMe\": true,\r\n        \"id\": \"BAE5A75CB0F39712\"\r\n    },\r\n    \"reaction\": \"🚀\"\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendPoll/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Poll
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"name\": \"Main text of the poll\",\r\n    \"selectableCount\": 1,\r\n    \"values\": [\r\n        \"Question 1\",\r\n        \"Question 2\",\r\n        \"Question 3\"\r\n    ]\r\n    // options\r\n    // \"delay\": 1200,\r\n    // \"quoted\": {\r\n    //     // payload message or key.id only for get message in database\r\n    //     \"key\": {\r\n    //         \"id\": \" MESSAGE_ID\"\r\n    //     },\r\n    //     \"message\": {\r\n    //         \"conversation\": \"CONTENT_MESSAGE\"\r\n    //     }\r\n    // },\r\n    // \"mentionsEveryOne\": false,\r\n    // \"mentioned\": [\r\n    //     \"{{remoteJid}}\"\r\n    // ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendList/{instance}:
    post:
      tags:
        - Send Message
      summary: Send List
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "number": "{{remoteJid}}",
                    "title": "List Title",
                    "description": "List description",
                    "buttonText": "Click Here",
                    "footerText": "footer list\nhttps://examplelink.com.br",
                    "sections": [
                        {
                            "title": "Row tilte 01",
                            "rows": [
                                {
                                    "title": "Title row 01",
                                    "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
                                    "rowId": "rowId 001"
                                },
                                {
                                    "title": "Title row 02",
                                    "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
                                    "rowId": "rowId 002"
                                }
                            ]
                        },
                        {
                            "title": "Row tilte 02",
                            "rows": [
                                {
                                    "title": "Title row 01",
                                    "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
                                    "rowId": "rowId 001"
                                },
                                {
                                    "title": "Title row 02",
                                    "description": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,",
                                    "rowId": "rowId 002"
                                }
                            ]
                        }
                    ]
                    // options
                    // "delay": 1200,
                    // "quoted": {
                    //     // payload message or key.id only for get message in database
                    //     "key": {
                    //         "id": " MESSAGE_ID"
                    //     },
                    //     "message": {
                    //         "conversation": "CONTENT_MESSAGE"
                    //     }
                    // },
                    // "mentionsEveryOne": false,
                    // "mentioned": [
                    //     "{{remoteJid}}"
                    // ]
                }
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendButtons/{instance}:
    post:
      tags:
        - Send Message
      summary: Send Button
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"title\": \"Title Button\",\r\n    \"description\": \"Description Button\",\r\n    \"footer\": \"Footer Button\",\r\n    \"buttons\": [\r\n        {\r\n            \"type\": \"reply\",\r\n            \"displayText\": \"Resposta\",\r\n            \"id\": \"123\"\r\n        }\r\n        // {\r\n        //     \"type\": \"copy\",\r\n        //     \"displayText\": \"Copia Código\",\r\n        //     \"copyCode\": \"ZXN0ZSDDqSB1bSBjw7NkaWdvIGRlIHRleHRvIGNvcGnDoXZlbC4=\"\r\n        // },\r\n        // {\r\n        //     \"type\": \"url\",\r\n        //     \"displayText\": \"Evolution API\",\r\n        //     \"url\": \"http://evolution-api.com\"\r\n        // },\r\n        // {\r\n        //     \"type\": \"call\",\r\n        //     \"displayText\": \"Me ligue\",\r\n        //     \"phoneNumber\": \"557499879409\"\r\n        // }\r\n        // {\r\n        //     \"type\": \"pix\",\r\n        //     \"currency\": \"BRL\",\r\n        //     \"name\": \"Davidson Gomes\",\r\n        //     \"keyType\": \"random\", /* phone, email, cpf, cnpj, random  */\r\n        //     \"key\": \"0ea59ac5-f001-4f0e-9785-c772200f1b1e\"\r\n        // }\r\n    ]\r\n    // options\r\n    // \"delay\": 1200,\r\n    // \"quoted\": {\r\n    //     // payload message or key.id only for get message in database\r\n    //     \"key\": {\r\n    //         \"id\": \" MESSAGE_ID\"\r\n    //     },\r\n    //     \"message\": {\r\n    //         \"conversation\": \"CONTENT_MESSAGE\"\r\n    //     }\r\n    // },\r\n    // \"mentionsEveryOne\": false,\r\n    // \"mentioned\": [\r\n    //     \"{{remoteJid}}\"\r\n    // ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /call/offer/{instance}:
    post:
      tags:
        - Call
      summary: Fake Call
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                number: '{{remoteJid}}'
                isVideo: false
                callDuration: 3
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/whatsappNumbers/{instance}:
    post:
      tags:
        - Chat
      summary: Check is WhatsApp Number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                numbers:
                  - '55911111111'
                  - '55922222222'
                  - '55933333333'
                  - '55944444444'
                  - '55955555555'
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/markMessageAsRead/{instance}:
    post:
      tags:
        - Chat
      summary: Read Messages
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                readMessages:
                  - remoteJid: 123@s.whatsapp.net
                    fromMe: false
                    id: 80C4CE9B72F797DBC6ECD8D19B247FC9
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/archiveChat/{instance}:
    post:
      tags:
        - Chat
      summary: Archive Chat
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"lastMessage\": {\r\n        \"key\": {\r\n            \"remoteJid\": \"123@s.whatsapp.net\",\r\n            \"fromMe\": false,\r\n            \"id\": \"80C4CE9B72F797DBC6ECD8D19B247FC9\"\r\n        }\r\n    },\r\n    \"chat\": \"123@s.whatsapp.net\",\r\n    // false: to unarchive\r\n    // true: to archive\r\n    \"archive\": false\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/markChatUnread/{instance}:
    post:
      tags:
        - Chat
      summary: Mark Chat Unread
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                lastMessage:
                  key:
                    remoteJid: 123@s.whatsapp.net
                    fromMe: false
                    id: 80C4CE9B72F797DBC6ECD8D19B247FC9
                chat: 123@s.whatsapp.net
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/deleteMessageForEveryone/{instance}:
    delete:
      tags:
        - Chat
      summary: Delete Message
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/fetchProfilePictureUrl/{instance}:
    post:
      tags:
        - Chat
      summary: Fetch Profile Picture
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                number: '{{remoteJid}}'
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/getBase64FromMediaMessage/{instance}:
    post:
      tags:
        - Chat
      summary: Get Base64 From Media Message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "/*\r\n  In this endpoint it is possible to extract the Base64 of the media \r\n  received in the messages, passing the message ID as a parameter.\r\n  Make sure that the received message is stored in MongoDB or in a file,\r\n  otherwise the error 400 - Bad Request will be displayed.\r\n  If the media type is audio, the mimetype audio/ogg is returned by default. \r\n  If you need an MP4 file, check the \"convertToMp4\" option as \"true\"\r\n*/\r\n{\r\n    // payload message or key.id only for get message in database\r\n    \"message\": {\r\n        \"key\": {\r\n            \"id\": \"3EB0F4A1F841F02958FB74\"\r\n        }\r\n    },\r\n    \"convertToMp4\": false\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/updateMessage/{instance}:
    post:
      tags:
        - Chat
      summary: Update Message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                number: '{{remoteJid}}'
                key:
                  remoteJid: 123@s.whatsapp.net
                  fromMe: true
                  id: 3EB04DC69D97835D7CC6F12776D25766FBC224E2
                text: new message
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/sendPresence/{instance}:
    post:
      tags:
        - Chat
      summary: Send Presence
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                number: '{{remoteJid}}'
                delay: 1200
                presence: composing
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/updateBlockStatus/{instance}:
    post:
      tags:
        - Chat
      summary: Update Block Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"status\": \"block\" /* block, unblock */\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/findContacts/{instance}:
    post:
      tags:
        - Chat
      summary: Find Contacts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "/*\r\n  Here it is possible to list all contacts or just one,\r\n  using the 'where' option.\r\n*/\r\n{\r\n  \"where\": {\r\n//    \"id\": \"{{remoteJid}}\" /* Optional */\r\n  }\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/findMessages/{instance}:
    post:
      tags:
        - Chat
      summary: Find Messages
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "/*\r\n  Each of these properties are optional.\r\n  With mongodb disabled, only the \"key.id\" property is available.\r\n  Remove all comments before submitting the request.\r\n*/\r\n{\r\n    \"where\": {\r\n        \"key\": {\r\n            \"remoteJid\": \"{{remoteJid}}\"\r\n        }\r\n    },\r\n    // optional\r\n    \"page\": 1,\r\n    \"offset\": 10\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/findStatusMessage/{instance}:
    post:
      tags:
        - Chat
      summary: Find Status Message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "/*\r\n  Each of these properties are optional.\r\n  With mongodb disabled, only the \"id\" property is available.\r\n  Remove all comments before submitting the request.\r\n*/\r\n{\r\n  \"where\": {\r\n    \"remoteJid\": \"123@s.whatsapp.net\",\r\n    \"id\": \"BAE5959535174C7E\"\r\n  },\r\n  // optional\r\n  \"page\": 1,\r\n  \"offset\": 10\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/findChats/{instance}:
    post:
      tags:
        - Chat
      summary: Find Chats
      requestBody:
        content: {}
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /label/findLabels/{instance}:
    get:
      tags:
        - Label
      summary: Find Labels
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /label/handleLabel/{instance}:
    post:
      tags:
        - Label
      summary: Handle Labels
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "number": "{{remoteJid}}",
                    "labelId": "labelId",
                    "action": "add" /* add or remove */
                }
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/fetchBusinessProfile/{instance}:
    post:
      tags:
        - Profile Settings
      summary: Fetch Business Profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                number: '{{remoteJid}}'
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/fetchProfile/{instance}:
    post:
      tags:
        - Profile Settings
      summary: Fetch Profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                number: '{{remoteJid}}'
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/updateProfileName/{instance}:
    post:
      tags:
        - Profile Settings
      summary: Update Profile Name
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Evolution-API
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/updateProfileStatus/{instance}:
    post:
      tags:
        - Profile Settings
      summary: Update Profile Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                status: Unavailable for calls
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/updateProfilePicture/{instance}:
    post:
      tags:
        - Profile Settings
      summary: Update Profile Picture
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                picture: https://avatars.githubusercontent.com/u/136080052?s=200&v=4
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/removeProfilePicture/{instance}:
    delete:
      tags:
        - Profile Settings
      summary: Remove Profile Picture
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/fetchPrivacySettings/{instance}:
    get:
      tags:
        - Profile Settings
      summary: Fetch Privacy Settings
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chat/updatePrivacySettings/{instance}:
    post:
      tags:
        - Profile Settings
      summary: Update Privacy Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "readreceipts": "all", /*'all', 'none'*/
                    "profile": "all", /*'all', 'contacts', 'contact_blacklist', 'none'*/
                    "status": "contacts", /*'all', 'contacts', 'contact_blacklist', 'none'*/
                    "online": "all", /*'all', 'match_last_seen'*/
                    "last": "contacts", /*'all', 'contacts', 'contact_blacklist', 'none'*/
                    "groupadd": "none" /*'all', 'contacts', 'contact_blacklist'*/
                }
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/create/{instance}:
    post:
      tags:
        - Group
      summary: Create Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                subject: Test 02
                description: optional
                participants:
                  - '5531900000000'
                  - '5531900000000'
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/updateGroupPicture/{instance}:
    post:
      tags:
        - Group
      summary: Update Group Picture
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                image: https://evolution-api.com/files/sticker.png
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/updateGroupSubject/{instance}:
    post:
      tags:
        - Group
      summary: Update Group Subject
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                subject: Group Name or Subject
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/updateGroupDescription/{instance}:
    post:
      tags:
        - Group
      summary: Update Group Description
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                description: Group Description or Rules
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/inviteCode/{instance}:
    get:
      tags:
        - Group
      summary: Fetch Invite Code
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/revokeInviteCode/{instance}:
    post:
      tags:
        - Group
      summary: Revoke Invite Code
      requestBody:
        content: {}
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/sendInvite/{instance}:
    post:
      tags:
        - Group
      summary: Send Invite Url
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                groupJid: '{{groupJid}}'
                description: 'Access this link to join my WhatsApp group:'
                numbers:
                  - '{{remoteJid}}'
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/inviteInfo/{instance}:
    get:
      tags:
        - Group
      summary: Find Group by Invite Code
      parameters:
        - name: inviteCode
          in: query
          schema:
            type: string
          example: '{{inviteCode}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/findGroupInfos/{instance}:
    get:
      tags:
        - Group
      summary: Find Group by Jid
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/fetchAllGroups/{instance}:
    get:
      tags:
        - Group
      summary: Fetch All Groups
      parameters:
        - name: getParticipants
          in: query
          schema:
            type: boolean
          example: 'false'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/participants/{instance}:
    get:
      tags:
        - Group
      summary: Find Participants
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/updateParticipant/{instance}:
    post:
      tags:
        - Group
      summary: Update Participant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n  \"action\": \"add\", // add = Add new member on group\r\n                   // remove = Remove existing member on group\r\n                   // promote = Promote to group admin\r\n                   // demote = Demote to group user\r\n  \"participants\": [\r\n    \"5531900000000\",\r\n    \"5531911111111\",\r\n    \"5531922222222\"\r\n  ]\r\n}"
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/updateSetting/{instance}:
    post:
      tags:
        - Group
      summary: Update Setting
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n  \"action\": \"not_announcement\" // announcement = Only Admins send messages\r\n                               // not_announcement = All Members send messages\r\n                               // locked = Only Admins edit group settings\r\n                               // unlocked = All Members edit group settings\r\n}"
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/toggleEphemeral/{instance}:
    post:
      tags:
        - Group
      summary: Toggle Ephemeral
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n  \"expiration\": 0 // 0 = Off \r\n                  // 86400 = 24 Hours \r\n                  // 604800 = 7 Days \r\n                  // 7776000 = 90 Days\r\n}"
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /group/leaveGroup/{instance}:
    delete:
      tags:
        - Group
      summary: Leave Group
      parameters:
        - name: groupJid
          in: query
          schema:
            type: string
          example: '{{groupJid}}'
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /websocket/set/{instance}:
    post:
      tags:
        - Integrations > Events > Websocket
      summary: Set Websocket
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                websocket:
                  enabled: true
                  events:
                    - APPLICATION_STARTUP
                    - QRCODE_UPDATED
                    - MESSAGES_SET
                    - MESSAGES_UPSERT
                    - MESSAGES_UPDATE
                    - MESSAGES_DELETE
                    - SEND_MESSAGE
                    - CONTACTS_SET
                    - CONTACTS_UPSERT
                    - CONTACTS_UPDATE
                    - PRESENCE_UPDATE
                    - CHATS_SET
                    - CHATS_UPSERT
                    - CHATS_UPDATE
                    - CHATS_DELETE
                    - GROUPS_UPSERT
                    - GROUP_UPDATE
                    - GROUP_PARTICIPANTS_UPDATE
                    - CONNECTION_UPDATE
                    - LABELS_EDIT
                    - LABELS_ASSOCIATION
                    - CALL
                    - TYPEBOT_START
                    - TYPEBOT_CHANGE_STATUS
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /websocket/find/{instance}:
    get:
      tags:
        - Integrations > Events > Websocket
      summary: Find Websocket
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /rabbitmq/set/{instance}:
    post:
      tags:
        - Integrations > Events > Rabbitmq
      summary: Set Rabbitmq
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rabbitmq:
                  enabled: true
                  events:
                    - APPLICATION_STARTUP
                    - QRCODE_UPDATED
                    - MESSAGES_SET
                    - MESSAGES_UPSERT
                    - MESSAGES_UPDATE
                    - MESSAGES_DELETE
                    - SEND_MESSAGE
                    - CONTACTS_SET
                    - CONTACTS_UPSERT
                    - CONTACTS_UPDATE
                    - PRESENCE_UPDATE
                    - CHATS_SET
                    - CHATS_UPSERT
                    - CHATS_UPDATE
                    - CHATS_DELETE
                    - GROUPS_UPSERT
                    - GROUP_UPDATE
                    - GROUP_PARTICIPANTS_UPDATE
                    - CONNECTION_UPDATE
                    - LABELS_EDIT
                    - LABELS_ASSOCIATION
                    - CALL
                    - TYPEBOT_START
                    - TYPEBOT_CHANGE_STATUS
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /rabbitmq/find/{instance}:
    get:
      tags:
        - Integrations > Events > Rabbitmq
      summary: Find Rabbitmq
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /sqs/set/{instance}:
    post:
      tags:
        - Integrations > Events > Sqs
      summary: Set Sqs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sqs:
                  enabled: true
                  events:
                    - APPLICATION_STARTUP
                    - QRCODE_UPDATED
                    - MESSAGES_SET
                    - MESSAGES_UPSERT
                    - MESSAGES_UPDATE
                    - MESSAGES_DELETE
                    - SEND_MESSAGE
                    - CONTACTS_SET
                    - CONTACTS_UPSERT
                    - CONTACTS_UPDATE
                    - PRESENCE_UPDATE
                    - CHATS_SET
                    - CHATS_UPSERT
                    - CHATS_UPDATE
                    - CHATS_DELETE
                    - GROUPS_UPSERT
                    - GROUP_UPDATE
                    - GROUP_PARTICIPANTS_UPDATE
                    - CONNECTION_UPDATE
                    - LABELS_EDIT
                    - LABELS_ASSOCIATION
                    - CALL
                    - TYPEBOT_START
                    - TYPEBOT_CHANGE_STATUS
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /sqs/find/{instance}:
    get:
      tags:
        - Integrations > Events > Sqs
      summary: Find Sqs
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /webhook/set/{instance}:
    post:
      tags:
        - Integrations > Events > Webhook
      summary: Set Webhook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                webhook:
                  enabled: true
                  url: https://webhook.site
                  headers:
                    autorization: Bearer TOKEN
                    Content-Type: application/json
                  byEvents: false
                  base64: false
                  events:
                    - APPLICATION_STARTUP
                    - QRCODE_UPDATED
                    - MESSAGES_SET
                    - MESSAGES_UPSERT
                    - MESSAGES_UPDATE
                    - MESSAGES_DELETE
                    - SEND_MESSAGE
                    - CONTACTS_SET
                    - CONTACTS_UPSERT
                    - CONTACTS_UPDATE
                    - PRESENCE_UPDATE
                    - CHATS_SET
                    - CHATS_UPSERT
                    - CHATS_UPDATE
                    - CHATS_DELETE
                    - GROUPS_UPSERT
                    - GROUP_UPDATE
                    - GROUP_PARTICIPANTS_UPDATE
                    - CONNECTION_UPDATE
                    - LABELS_EDIT
                    - LABELS_ASSOCIATION
                    - CALL
                    - TYPEBOT_START
                    - TYPEBOT_CHANGE_STATUS
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /webhook/find/{instance}:
    get:
      tags:
        - Integrations > Events > Webhook
      summary: Find Webhook
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chatwoot/set/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Chatwoot
      summary: Set Chatwoot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                enabled: true
                accountId: '1'
                token: TOKEN
                url: https://chatwoot.com
                signMsg: true
                reopenConversation: true
                conversationPending: false
                nameInbox: evolution
                mergeBrazilContacts: true
                importContacts: true
                importMessages: true
                daysLimitImportMessages: 2
                signDelimiter: |+

                autoCreate: true
                organization: BOT
                logo: link da sua
                ignoreJids:
                  - '@g.us'
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /chatwoot/find/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Chatwoot
      summary: Find Chatwoot
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/changeStatus/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Typebot > Typebot Session
      summary: Change Session Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"remoteJid\": \"5511912345678@s.whatsapp.net\",\r\n    \"status\": \"closed\" /* opened, paused, closed */\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/fetchSessions/{typebotId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Typebot > Typebot Session
      summary: Fetch Sessions
      parameters:
        - name: typebotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/settings/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Typebot > Default Settings
      summary: Set Default Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                expire: 20
                keywordFinish: '#SAIR'
                delayMessage: 1000
                unknownMessage: Mensagem não reconhecida
                listeningFromMe: false
                stopBotFromMe: false
                keepOpen: false
                debounceTime: 10
                ignoreJids: []
                typebotIdFallback: clyja4oys0a3uqpy7k3bd7swe
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/fetchSettings/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Typebot > Default Settings
      summary: Fetch Default Settings
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/create/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Typebot
      summary: Create Typebot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"enabled\": true,\r\n    \"url\": \"https://bot.dgcode.com.br\",\r\n    \"typebot\": \"my-typebot-uoz1rg9\",\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"regex\", /* contains, equals, startsWith, endsWith, regex */\r\n    \"triggerValue\": \"^atend.*\",\r\n    \"expire\": 20,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 10\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/find/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Typebot
      summary: Find Typebots
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/fetch/{typebotId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Typebot
      summary: Fetch Typebot
      parameters:
        - name: typebotId
          in: path
          schema:
            type: string
          required: true
          example: clx6niurm0001lzrhhqqe72yq
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/update/{typebotId}/{instance}:
    put:
      tags:
        - Integrations > Chatbot > Typebot
      summary: Update Typebot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n\t\"enabled\": true,\r\n    \"url\": \"https://bot.dgcode.com.br\",\r\n    \"typebot\":  \"my-typebot-uoz1rg9\",\r\n    \"expire\": 20,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 10,\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"contains\", /* contains, equals, startsWith, endsWith */\r\n    \"triggerValue\": \"evolution\"\r\n}"
      parameters:
        - name: typebotId
          in: path
          schema:
            type: string
          required: true
          example: clx6niurm0001lzrhhqqe72yq
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/delete/{typebotId}/{instance}:
    delete:
      tags:
        - Integrations > Chatbot > Typebot
      summary: Delete Typebot
      parameters:
        - name: typebotId
          in: path
          schema:
            type: string
          required: true
          example: clx6niurm0001lzrhhqqe72yq
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /typebot/start/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Typebot
      summary: Start Typebot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                url: https://bot.dgcode.com.br
                typebot: fluxo-unico-3uuso28
                remoteJid: 557499879409@s.whatsapp.net
                startSession: false
                variables:
                  - name: pushName
                    value: Davidson Gomes
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/changeStatus/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Evolution Bot > Session
      summary: Change Session Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"remoteJid\": \"5511912345678@s.whatsapp.net\",\r\n    \"status\": \"closed\" /* opened, paused, closed */\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/fetchSessions/{evolutionBotId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Evolution Bot > Session
      summary: Fetch Sessions
      parameters:
        - name: evolutionBotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/settings/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Evolution Bot > Default Settings
      summary: Set Default Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                expire: 20
                keywordFinish: '#SAIR'
                delayMessage: 1000
                unknownMessage: Mensagem não reconhecida
                listeningFromMe: false
                stopBotFromMe: false
                keepOpen: false
                debounceTime: 0
                ignoreJids: []
                botIdFallback: clyja4oys0a3uqpy7k3bd7swe
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/fetchSettings/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Evolution Bot > Default Settings
      summary: Fetch Default Settings
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/create/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Evolution Bot
      summary: Create Bots
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"enabled\": true,\r\n    \"apiUrl\": \"http://api.site.com/v1\",\r\n    \"apiKey\": \"app-123456\", // optional\r\n    // options\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"equals\", /* contains, equals, startsWith, endsWith, regex, none */\r\n    \"triggerValue\": \"teste\",\r\n    \"expire\": 0,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 0,\r\n    \"ignoreJids\": []\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/find/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Evolution Bot
      summary: Find Bots
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/fetch/{evolutionBotId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Evolution Bot
      summary: Fetch Bot
      parameters:
        - name: evolutionBotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/update/{evolutionBotId}/{instance}:
    put:
      tags:
        - Integrations > Chatbot > Evolution Bot
      summary: Update Bot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"enabled\": true,\r\n    \"apiUrl\": \"http://api.site.com/v1\",\r\n    \"apiKey\": \"app-123456\", // optional\r\n    // options\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"equals\", /* contains, equals, startsWith, endsWith, regex, none */\r\n    \"triggerValue\": \"teste\",\r\n    \"expire\": 0,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 0,\r\n    \"ignoreJids\": []\r\n}"
      parameters:
        - name: evolutionBotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /evolutionBot/delete/{evolutionBotId}/{instance}:
    delete:
      tags:
        - Integrations > Chatbot > Evolution Bot
      summary: Delete Bot
      parameters:
        - name: evolutionBotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/changeStatus/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Openai > Openai Session
      summary: Change Session Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"remoteJid\": \"5511912345678@s.whatsapp.net\",\r\n    \"status\": \"closed\" /* opened, paused, closed */\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/fetchSessions/{openaiBotId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Openai > Openai Session
      summary: Fetch Sessions
      parameters:
        - name: openaiBotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/settings/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Openai > Default Settings
      summary: Set Default Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                openaiCredsId: clyja4oys0a3uqpy7k3bd7swe
                expire: 20
                keywordFinish: '#SAIR'
                delayMessage: 1000
                unknownMessage: Mensagem não reconhecida
                listeningFromMe: false
                stopBotFromMe: false
                keepOpen: false
                debounceTime: 0
                ignoreJids: []
                openaiIdFallback: clyja4oys0a3uqpy7k3bd7swe
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/fetchSettings/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Openai > Default Settings
      summary: Fetch Default Settings
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/creds/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Openai > Openai Creds
      summary: Set Openai Creds
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: apikey
                apiKey: sk-proj-...
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Integrations > Chatbot > Openai > Openai Creds
      summary: Get Openai Creds
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/creds/{openaiCredsId}/{instance}:
    delete:
      tags:
        - Integrations > Chatbot > Openai > Openai Creds
      summary: Delete Openai Creds
      parameters:
        - name: openaiCredsId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/create/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Openai
      summary: Create Openai Bots
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"enabled\": true,\r\n    \"openaiCredsId\": \"clyrx36wj0001119ucjjzxik1\",\r\n    \"botType\": \"assistant\", /* assistant or chatCompletion */\r\n    // for assistants\r\n    \"assistantId\": \"asst_LRNyh6qC4qq8NTyPjHbcJjSp\",\r\n    \"functionUrl\": \"https://n8n.site.com\",\r\n    // for chat completion\r\n    \"model\": \"gpt-4o\",\r\n    \"systemMessages\": [\r\n        \"You are a helpful assistant.\"\r\n    ],\r\n    \"assistantMessages\": [\r\n        \"\\n\\nHello there, how may I assist you today?\"\r\n    ],\r\n    \"userMessages\": [\r\n        \"Hello!\"\r\n    ],\r\n    \"maxTokens\": 300,\r\n    // options\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"equals\", /* contains, equals, startsWith, endsWith, regex, none */\r\n    \"triggerValue\": \"teste\",\r\n    \"expire\": 20,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 10,\r\n    \"ignoreJids\": []\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/find/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Openai
      summary: Find Openai Bots
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/fetch/{openaiBotId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Openai
      summary: Fetch Openai Bot
      parameters:
        - name: openaiBotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/update/{openaiBotId}/{instance}:
    put:
      tags:
        - Integrations > Chatbot > Openai
      summary: Update Openai Bot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n\t\"enabled\": true,\r\n\t\"openaiCredsId\": \"clyrx36wj0001119ucjjzxik1\",\r\n\t\"botType\": \"assistant\", /* assistant or chatCompletion */\r\n\t// for assistants\r\n\t\"assistantId\": \"asst_LRNyh6qC4qq8NTyPjHbcJjSp\",\r\n    \"functionUrl\": \"https://webhook.com\",\r\n\t// for chat completion\r\n\t\"model\": \"gpt-4o\",\r\n\t\"systemMessages\": [\r\n\t\t\"You are a helpful assistant.\"\r\n\t],\r\n\t\"assistantMessages\": [\r\n\t\t\"\\n\\nHello there, how may I assist you today?\"\r\n\t],\r\n\t\"userMessages\": [\r\n\t\t\"Hello!\"\r\n\t],\r\n\t\"maxTokens\": 300,\r\n\t// options\r\n\t\"triggerType\": \"keyword\", /* all or keyword */\r\n\t\"triggerOperator\": \"equals\", /* contains, equals, startsWith, endsWith, regex, none */\r\n\t\"triggerValue\": \"teste\",\r\n\t\"expire\": 20,\r\n\t\"keywordFinish\": \"#SAIR\",\r\n\t\"delayMessage\": 1000,\r\n\t\"unknownMessage\": \"Mensagem não reconhecida\",\r\n\t\"listeningFromMe\": false,\r\n\t\"stopBotFromMe\": false,\r\n\t\"keepOpen\": false,\r\n\t\"debounceTime\": 10,\r\n\t\"ignoreJids\": []\r\n}"
      parameters:
        - name: openaiBotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /openai/delete/{openaiBotId}/{instance}:
    delete:
      tags:
        - Integrations > Chatbot > Openai
      summary: Delete Openai Bot
      parameters:
        - name: openaiBotId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/changeStatus/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Dify > Dify Session
      summary: Change Session Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"remoteJid\": \"5511912345678@s.whatsapp.net\",\r\n    \"status\": \"closed\" /* opened, paused, closed */\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/fetchSessions/{difyId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Dify > Dify Session
      summary: Fetch Sessions
      parameters:
        - name: difyId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/settings/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Dify > Default Settings
      summary: Set Default Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                expire: 20
                keywordFinish: '#SAIR'
                delayMessage: 1000
                unknownMessage: Mensagem não reconhecida
                listeningFromMe: false
                stopBotFromMe: false
                keepOpen: false
                debounceTime: 0
                ignoreJids: []
                difyIdFallback: clyja4oys0a3uqpy7k3bd7swe
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/fetchSettings/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Dify > Default Settings
      summary: Fetch Default Settings
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/create/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Dify
      summary: Create Dify Bots
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"enabled\": true,\r\n    \"botType\": \"chatBot\", /* chatBot, textGenerator, agent, workflow */\r\n    \"apiUrl\": \"http://dify.site.com/v1\",\r\n    \"apiKey\": \"app-123456\",\r\n    // options\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"equals\", /* contains, equals, startsWith, endsWith, regex, none */\r\n    \"triggerValue\": \"teste\",\r\n    \"expire\": 0,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 0,\r\n    \"ignoreJids\": []\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/find/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Dify
      summary: Find Dify Bots
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/fetch/{difyId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Dify
      summary: Fetch Dify Bot
      parameters:
        - name: difyId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/update/{difyId}/{instance}:
    put:
      tags:
        - Integrations > Chatbot > Dify
      summary: Update Dify Bot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"enabled\": true,\r\n    \"botType\": \"chatBot\", /* chatBot, textGenerator, agent, workflow */\r\n    \"apiUrl\": \"http://dify.site.com/v1\",\r\n    \"apiKey\": \"app-123456\",\r\n    // options\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"equals\", /* contains, equals, startsWith, endsWith, regex, none */\r\n    \"triggerValue\": \"teste\",\r\n    \"expire\": 0,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 0,\r\n    \"ignoreJids\": []\r\n}"
      parameters:
        - name: difyId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dify/delete/{difyId}/{instance}:
    delete:
      tags:
        - Integrations > Chatbot > Dify
      summary: Delete Dify Bot
      parameters:
        - name: difyId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/changeStatus/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Flowise > Flowise Session
      summary: Change Session Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"remoteJid\": \"5511912345678@s.whatsapp.net\",\r\n    \"status\": \"closed\" /* opened, paused, closed */\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/fetchSessions/{difyId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Flowise > Flowise Session
      summary: Fetch Sessions
      parameters:
        - name: difyId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/settings/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Flowise > Default Settings
      summary: Set Default Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                expire: 20
                keywordFinish: '#SAIR'
                delayMessage: 1000
                unknownMessage: Mensagem não reconhecida
                listeningFromMe: false
                stopBotFromMe: false
                keepOpen: false
                debounceTime: 0
                ignoreJids: []
                flowiseIdFallback: clyja4oys0a3uqpy7k3bd7swe
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/fetchSettings/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Flowise > Default Settings
      summary: Fetch Default Settings
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/create/{instance}:
    post:
      tags:
        - Integrations > Chatbot > Flowise
      summary: Create Flowise Bots
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"enabled\": true,\r\n    \"apiUrl\": \"http://flowise.site.com/v1\",\r\n    \"apiKey\": \"app-123456\", // optional\r\n    // options\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"equals\", /* contains, equals, startsWith, endsWith, regex, none */\r\n    \"triggerValue\": \"teste\",\r\n    \"expire\": 0,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 0,\r\n    \"ignoreJids\": []\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/find/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Flowise
      summary: Find Flowise Bots
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/fetch/{flowiseId}/{instance}:
    get:
      tags:
        - Integrations > Chatbot > Flowise
      summary: Fetch Flowise Bot
      parameters:
        - name: flowiseId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/update/{flowiseId}/{instance}:
    put:
      tags:
        - Integrations > Chatbot > Flowise
      summary: Update Flowise Bot
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"enabled\": true,\r\n    \"apiUrl\": \"http://dify.site.com/v1\",\r\n    \"apiKey\": \"app-123456\", // optional\r\n    // options\r\n    \"triggerType\": \"keyword\", /* all or keyword */\r\n    \"triggerOperator\": \"equals\", /* contains, equals, startsWith, endsWith, regex, none */\r\n    \"triggerValue\": \"teste\",\r\n    \"expire\": 0,\r\n    \"keywordFinish\": \"#SAIR\",\r\n    \"delayMessage\": 1000,\r\n    \"unknownMessage\": \"Mensagem não reconhecida\",\r\n    \"listeningFromMe\": false,\r\n    \"stopBotFromMe\": false,\r\n    \"keepOpen\": false,\r\n    \"debounceTime\": 0,\r\n    \"ignoreJids\": []\r\n}"
      parameters:
        - name: flowiseId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /flowise/delete/{flowiseId}/{instance}:
    delete:
      tags:
        - Integrations > Chatbot > Flowise
      summary: Delete Flowise Bot
      parameters:
        - name: flowiseId
          in: path
          schema:
            type: string
          required: true
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /message/sendTemplate/{instance}:
    post:
      tags:
        - Integrations > Channel > Cloud API Oficial > Send Message
      summary: Send Template
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"number\": \"{{remoteJid}}\",\r\n    \"name\": \"hello_world\",\r\n    \"language\": \"en_US\",\r\n    // \"webhookUrl\": \"\", (optional)\r\n    \"components\": [\r\n        {\r\n            \"type\": \"body\",\r\n            \"parameters\": [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": \"Name\"\r\n                },\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": \"email@email.com\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"type\": \"button\",\r\n            \"sub_type\": \"URL\",\r\n            \"index\": \"1\",\r\n            \"parameters\": [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": \"/reset-password/1234\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /template/create/{instance}:
    post:
      tags:
        - Integrations > Channel > Cloud API Oficial > Template
      summary: Create Template
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"name\": \"teste_evolution\",\r\n    \"category\": \"MARKETING\", /* AUTHENTICATION, MARKETING, UTILITY */\r\n    \"allowCategoryChange\": false,\r\n    \"language\": \"en_US\",\r\n    // \"webhookUrl\": \"\", (optional)\r\n    \"components\": [\r\n        {\r\n            \"type\": \"BODY\",\r\n            \"text\": \"Thank you for your order, {{1}}! Your confirmation number is {{2}}. If you have any questions, please use the buttons below to contact support. Thank you for being a customer!\",\r\n            \"example\": {\r\n                \"body_text\": [\r\n                    [\r\n                        \"Pablo\",\r\n                        \"860198-230332\"\r\n                    ]\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"type\": \"BUTTONS\",\r\n            \"buttons\": [\r\n                {\r\n                    \"type\": \"QUICK_REPLY\",\r\n                    \"text\": \"Unsubscribe from Promos\"\r\n                },\r\n                {\r\n                    \"type\": \"URL\",\r\n                    \"text\": \"Contact Support\",\r\n                    \"url\": \"https://atendai.com\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /template/find/{instance}:
    get:
      tags:
        - Integrations > Channel > Cloud API Oficial > Template
      summary: Find Templates
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /s3/getMedia/{instance}:
    post:
      tags:
        - Integrations > Storage > S3
      summary: Get Media
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    // \"id\": \"\",\r\n    // \"type\": \"\",\r\n    // \"messageId\": \"\"\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /s3/getMediaUrl/{instance}:
    post:
      tags:
        - Integrations > Storage > S3
      summary: Get Media Url
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"id\": \"clykhoqq70003pmm88bb6eejd\"\r\n    // \"type\": \"\",\r\n    // \"messageId\": \"\"\r\n}"
      parameters:
        - name: instance
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /:
    get:
      tags:
        - default
      summary: Get Informations
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
